{"ast":null,"code":"import { getPathFromState, NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport LinkingContext from './LinkingContext';\nimport useLinkTo from './useLinkTo';\n\nconst getStateFromParams = params => {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        // @ts-expect-error\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n\n  return undefined;\n};\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\n\n\nexport default function useLinkProps(_ref) {\n  let {\n    to,\n    action\n  } = _ref;\n\n  var _options$getPathFromS;\n\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const {\n    options\n  } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo();\n\n  const onPress = e => {\n    var _e$currentTarget;\n\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && // onPress prevented default\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && // ignore everything but left clicks\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = (_options$getPathFromS = options === null || options === void 0 ? void 0 : options.getPathFromState) !== null && _options$getPathFromS !== void 0 ? _options$getPathFromS : getPathFromState;\n  const href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      // @ts-expect-error\n      params: to.params,\n      // @ts-expect-error\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href,\n    accessibilityRole: 'link',\n    onPress\n  };\n}","map":{"version":3,"sources":["/Users/anishsownderraj/edu_app/node_modules/@react-navigation/native/lib/module/useLinkProps.js"],"names":["getPathFromState","NavigationContainerRefContext","NavigationHelpersContext","React","Platform","LinkingContext","useLinkTo","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","to","action","_options$getPathFromS","root","useContext","navigation","options","linkTo","onPress","e","_e$currentTarget","shouldHandle","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","href","config","accessibilityRole"],"mappings":"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","sourcesContent":["import { getPathFromState, NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport LinkingContext from './LinkingContext';\nimport useLinkTo from './useLinkTo';\n\nconst getStateFromParams = params => {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        // @ts-expect-error\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n\n  return undefined;\n};\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\n\n\nexport default function useLinkProps({\n  to,\n  action\n}) {\n  var _options$getPathFromS;\n\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const {\n    options\n  } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo();\n\n  const onPress = e => {\n    var _e$currentTarget;\n\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && // onPress prevented default\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && // ignore everything but left clicks\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = (_options$getPathFromS = options === null || options === void 0 ? void 0 : options.getPathFromState) !== null && _options$getPathFromS !== void 0 ? _options$getPathFromS : getPathFromState;\n  const href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      // @ts-expect-error\n      params: to.params,\n      // @ts-expect-error\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href,\n    accessibilityRole: 'link',\n    onPress\n  };\n}\n//# sourceMappingURL=useLinkProps.js.map"]},"metadata":{},"sourceType":"module"}